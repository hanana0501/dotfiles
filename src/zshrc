
# export {{{
export EDITOR='vim'

# android
export ANDROID_HOME="$HOME/Library/Android/sdk"
export PATH=$PATH":$ANDROID_HOME/platform-tools"
export PATH=$PATH":$ANDROID_HOME/tools"

# go
export GOPATH="$HOME"
export PATH=$PATH:$GOPATH/bin

# my script
export PATH=$PATH:$HOME/.dotfiles/bin

# Java_HOME
# export JAVA_HOME=$(/usr/libexec/java_home -v 1.6)
case ${OSTYPE} in
    darwin*)
        export JAVA_HOME=$(/usr/libexec/java_home -v 1.8) ;;
esac

# }}}

# setopt {{{

setopt PROMPT_SUBST
setopt no_beep
setopt correct
setopt magicequalsubst
setopt auto_list
setopt auto_menu

# }}}

#  history {{{
# https://github.com/sorin-ionescu/prezto/blob/master/modules/history/init.zsh

#
# Variables
#

HISTFILE="${ZDOTDIR:-$HOME}/.zhistory"       # The path to the history file.
HISTSIZE=10000                   # The maximum number of events to save in the internal history.
SAVEHIST=10000                   # The maximum number of events to save in the history file.

#
# Options
#

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_BEEP 

# }}}

# autoload {{{

autoload -Uz vcs_info

# }}}

# completion {{{

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# }}}

# meaningless
# ls {{{
export LSCOLORS=Exfxcxdxbxegedabagacad
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
export ZLS_COLORS=$LS_COLORS
export CLICOLOR=true
# }}}

# prompt {{{

function random_glyphs() {
    local glyphs=(
        ' '
        ' '
        ' '
        ' '
        ' '
        ' '
    )
    local ran=$(($(od -vAn -N4 -tu4 < /dev/random) % 6))
    echo $glyphs[$(($ran + 1))]
}

function show_git_info_if_needed() {
    if [ -e $PWD/.git ]
    then
        branch=$(git branch | grep '*' | awk '{ print $2 }')
        echo '%F{255}%f%K{255}%F{000}   '$branch' %k%f%F{255}%f'
    fi
}

PROMPT=' $(random_glyphs) $PWD $(show_git_info_if_needed)  '

# }}}

# zgen {{{
if ! [ -e ${HOME}/.zgen ]; then
    git clone https://github.com/tarjoilija/zgen.git "${HOME}/.zgen"
fi

source "${HOME}/.zgen/zgen.zsh"

if ! zgen saved; then
    zgen load b4b4r07/enhancd
    ENHANCD_HOOK_AFTER_CD=l
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load RobSis/zsh-completion-generator
    zgen load zsh-users/zsh-completions
    zgen save
fi

# }}}

# keybind alias function {{{

# ls
case ${OSTYPE} in
    darwin*)
        alias l='/usr/local/bin/gls --color -XlAh'
        ;;
    linux*)
        alias l='ls --color -XlAh'
        ;;
esac

# vim
alias v='vim'
# cd
alias c='cd'

# git
alias g='git'
alias gf='git fetch --prune'
alias gfp='git fetch --prune'
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gcb='git checkout -b'
alias gco='git checkout'
alias gd='git diff'
alias gl='git pull --prune'
alias gm='git merge'
alias gp='git push'
alias gpu='git push -u origin $(git-current-branch-name)'
alias gst='git status'
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'


# tree
alias tree="tree -NC" # N: 文字化け対策, C:色をつける

# vim
alias vi="vim"

# tmux
alias tmux="TERM=screen-256color-bce tmux"

# 通知
alias notice='~/.dotfiles/bin/notice.sh'

# mux
alias mux="tmuxinator"

#open
alias o='open'

# 現在のbranch取得
function git-current-branch-name() {
    git branch | grep '^\*' | sed 's/^\* *//'
}

# ブランチを絞り込む
function git_branch(){
    local branch=$(git branch -a | fzy | tr -d ' ' | tr -d '*')
    if [ -n "$branch" ]; then
        if [ -n "$LBUFFER" ]; then
            local new_left="${LBUFFER%\ } $branch"
        else
            local new_left="$branch"
        fi
        BUFFER=${new_left}${RBUFFER}
        CURSOR=${#new_left}
    fi
}

#アプリを終了させる
function kill_process () {
    ps -ef | fzy | awk '{ print $2 }' | xargs kill
    zle clear-screen
}

# ハッシュを絞り込む
function git_hash(){                                    
    git log --oneline --branches | fzy | awk '{print $1}'
}  

# pathをみやすく
function show_path(){
      echo -e ${PATH//:/'\n'}
}

# gitグラフ描画
function graph {
	git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)― %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
}

# gitのrootに移動
function cd_gitroot() {

  local option OPTARG OPTIND
  while getopts ':h' option; do
    case $option in
      h)
        cdgitroot_print_usage
        return 0
        ;;
      :)
        cdgitroot_print_error "option requires an argument -- $OPTARG"
        return 1
        ;;
      *)
        cdgitroot_print_error "invalid option -- $OPTARG"
        return 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
    cdgitroot_print_error "Not in a git repository"
    return 1
  fi

  local relative_path="$1"
  local root_path=$(git rev-parse --show-toplevel)

  if [ -n "$relative_path" ]; then
    cd "$root_path/$relative_path"
  else
    cd "$root_path"
  fi
}

# ヒストリを絞り込む
function select_history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        fzy --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N select_history
bindkey '^r' select_history 

function fb() {
    local branches branch
    branches=$(git branch -vv) &&
    branch=$(echo "$branches" | fzy) &&
    git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

function fbr() {
	echo "not implemented"
}

function cdg() {
    builtin cd $(ghq list -p | fzy)
}
zle -N cdg

# }}}
